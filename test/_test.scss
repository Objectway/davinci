@import 'true';
@import '../dist/main';

@include test-module('Functions') {

  @include test('remove unit') {
    $test: remove-unit(10px);
    $expect: 10;
    @include assert-equal($test, $expect,
      'Remove unit from a value');
  }

  @include test('rem calc') {
    $test: rem-calc(48);
    $expect: 3rem;
    $test2: rem-calc(8 16 32 64);
    $expect2: 0.5rem 1rem 2rem 4rem;
    $test3: rem-calc(16, 8px);
    $expect3: 2rem;
    @include assert-equal($test, $expect,
      'Transform a px value in rem value');
    @include assert-equal($test2, $expect2,
      'Transform a list of px value in rem values');
    @include assert-equal($test3, $expect3,
      'rem-calc with different rem-base');
  }

  @include test('em calc') {
    $test: em-calc(48);
    $expect: 3em;
    $test2: em-calc(8 16 32 64);
    $expect2: 0.5em 1em 2em 4em;
    $test3: em-calc(16, 8px);
    $expect3: 2em;
    @include assert-equal($test, $expect,
      'Transform a px value in em value');
    @include assert-equal($test2, $expect2,
      'Transform a list of px value in em values');
    @include assert-equal($test3, $expect3,
      'em-calc with different rem-base');
  }

  @include test('px calc') {
    $test: px-calc(1);
    $expect: 16px;
    $test2: px-calc(0.5em 1rem 2rem 10em);
    $expect2: 8px 16px 32px 160px;
    $test3: px-calc(1, 8px);
    $expect3: 8px;
    @include assert-equal($test, $expect,
      'Transform a px value in em value');
    @include assert-equal($test2, $expect2,
      'Transform a list of px value in em values');
    @include assert-equal($test3, $expect3,
      'em-calc with different rem-base');
  }

}


@include test-module('Mixins') {

  @include test('dry-it') {

    @include assert(
      'If $use-dry: true selector with same ID must be extended' +
      'else they will not be extended, but render normally.'
    ) {
      $unique-id: unique-id();
      $use-dry: true !global;

      @include input {
        @include dry-it($unique-id) {
          display: block;
        }

        @include dry-it($unique-id) {
          display: none;
        }
      }

      @include expect {
        display: block;
      }
      //ELSE
      $use-dry: false !global;

      @include input {
        @include dry-it($unique-id) {
          display: block;
        }

        @include dry-it($unique-id) {
          display: none;
        }
      }

      @include expect {
        display: block;
        display: none;
      }
    }
  }
};

@include test-module('Grid mixins') {
  // GRID CALC
  @include test('grid-calc') {

    @include assert('With width auto, we must reset flex properties.') {

      @include input {
        @include grid-calc(width, auto);
      }

      @include expect {
        flex: 1 1 0%;
        width: auto;
      }
    }

    @include assert(
      'With a value to width, we must delete flex grow and shrink'
    ) {

      @include input {
        @include grid-calc(width, 6);
      }

      @include expect {
        flex: 0 0 auto;
        width: 50%;
      }
    }

    @include assert(
      'Test case with n of N syntax, only calculate '+
      'the grid space and set flex if width'
    ) {

      @include input {
        @include grid-calc(width, 2 of 4);
      }

      @include expect {
        width: 50%;
      }

      @include input {
        @include grid-calc(margin-left, 1 of 4);
      }

      @include expect {
        margin-left: 25%;
      }
    }

    @include assert(
      'Test case for columns with margin option actived and n to N syntax'
    ) {

      @include input {
        @include grid-calc(width, 1 of 4, $margin: true);
      }

      @include expect {
        flex: 0 0 auto;
        width: calc(25% - 1.875rem);
      }
    }

    @include assert(
      'Test case for columns with margin option actived'
    ) {

      @include input {
        @include grid-calc(width, 2, $margin: true);
      }

      @include expect {
        flex: 0 0 auto;
        width: calc(16.66667% - 1.875rem);
      }
    }
  }
  // GRID SPACE
  @include test('grid-space') {

    @include assert('Default: width, auto') {

      @include input {
        @include grid-space();
      }

      @include expect {
        flex: 1 1 0%;
        width: auto;
      }
    }

    @include assert('width n of N') {

      @include input {
        @include grid-space(width, 1 of 10);
      }

      @include expect {
        flex: 0 0 auto;
        width: 10%;
      }
    }

    @include assert('width in grid') {

      @include input {
        @include grid-space(width, 6);
      }

      @include expect {
        flex: 0 0 auto;
        width: 50%;
      }
    }

    @include assert('property different from width') {

      @include input {
        @include grid-space(left, 6);
      }

      @include expect {
        left: 50%;
      }

      @include input {
        @include grid-space(left, 1 of 2);
      }

      @include expect {
        left: 50%;
      }
    }
  }
  // GRID Row
  @include test('grid-row') {

    @include assert('Default') {

      @include input {
        @include grid-row(true, false)
      }

      @include expect {
        box-sizing: border-box;
        flex: 1 0 auto;
        margin: 0 (-$column-gutter / 2);
        width: calc(100% + #{$column-gutter});
        display: flex;
        flex-wrap: wrap;
      }
    }
    @include assert('inverted') {

      @include input {
        @include grid-row(false, true)
      }

      @include expect {
        box-sizing: border-box;
        margin: 0 auto;
        max-width: $row-width;
        width: 100%;
        display: flex;
        flex-wrap: wrap;
        flex-direction: column;
      }
    }
  }

  // GRID Column
  @include test('grid-column') {

    @include assert('Default and collapse') {

      @include input {
        @include grid-column($collapse: true);
      }

      @include expect {
        box-sizing: border-box;
        display: flex;
        flex-direction: column;
        padding-left: 0;
        padding-right: 0;
      }
    }

    @include assert('Offset, push and pull') {

      @include input {
        @include grid-column(
          $offset: 5,
          $push: 5,
          $pull: 5
        );
      }

      @include expect {
        box-sizing: border-box;
        display: flex;
        flex-direction: column;
        padding-left: 0.9375rem;
        padding-right: 0.9375rem;
        margin-left: 41.66667%;
        position: relative;
        right: auto;
        left: 41.66667%;
        position: relative;
        left: auto;
        right: 41.66667%;
      }
    }

    @include assert('Offset, with use-margin') {

      @include input {
        @include grid-column(
          $offset: 5,
          $margin: true,
          $collapse: true
        );
      }

      @include expect {
        box-sizing: border-box;
        display: flex;
        flex-direction: column;
        padding-left: 0;
        padding-right: 0;
        margin-left: 0.9375rem;
        margin-right: 0.9375rem;
        margin-left: calc(41.66667% + 0.9375rem);
      }
    }

    @include assert('Order') {

      @include input {
        @include grid-column($order: 5);
      }

      @include expect {
        box-sizing: border-box;
        display: flex;
        flex-direction: column;
        padding-left: 0.9375rem;
        padding-right: 0.9375rem;
        order: 5;
      }
    }
  }
};

// MEDIA QUERIES AND VISIBILITY ARE NOT TESTABLE, WE ARE WORKING ON IT!

// @include test-module('Visibility') {
//   @include test('Visibility test') {
//     @include assert('') {

//       @include input {
//         @media screen and (min-width: 480px) {
//           display: none;
//         }
//       }

//       @include expect {
//         display: none;
//       }
//     }
//   }
// };



@include report;
