@use "sass:math";

// - REMOVE THE UNIT FROM A VALUE. BASED ON ZURB FOUNDATION
@function remove-unit($value) {
  @return math.div($value, ($value * 0 + 1));
}

// - TRANSFORM AN ARRAY OF PX VALUES (with or without px value) in rem unit - //

// - EXAMPLES
//
//  width: rem-calc(16 8 16 8)
//  will return
//  width: 1rem 0.5rem 1rem 0.5rem
//
//  width: rem-calc(8)
//  will return
//  width: 1rem

$rem-base: 16px !default;

@function unit-calc($values, $base-value, $unit) {
  @if length($values) == 1 {
    @if $unit != 1px {
      @return math.div(remove-unit($values), remove-unit($base-value)) * $unit;
    } @else {
      @return remove-unit($values) * remove-unit($base-value) * $unit;
    }
  } @else {
    // empty array that we will return
    $unit-values: ();

    @each $value in $values {
      @if $unit != 1px {
        $unit-values: append(
          $unit-values,
          math.div(remove-unit($value), remove-unit($base-value)) * $unit
        );
      } @else {
        $unit-values: append(
          $unit-values,
          remove-unit($value) * remove-unit($base-value) * $unit
        );
      }
    }

    @return $unit-values;
  }
}

@function rem-calc($values, $base-value: $rem-base) {
  @return unit-calc($values, $base-value, 1rem);
}

// - TRANSFORM AN ARRAY OF PX VALUES (with or without px value) in em unit - //

@function em-calc($values, $base-value: $rem-base) {
  @return unit-calc($values, $base-value, 1em);
}

// - TRANSFORM AN ARRAY OF EM VALUES (with or without em value) in px unit - //
@function px-calc($values, $base-value: $rem-base) {
  @return unit-calc($values, $base-value, 1px);
}

/// An equivalent of `zip` function but for maps.
/// Takes two lists, the first for keys, second for values.
/// From: https://www.sitepoint.com/extra-map-functions-sass/
/// @param {List} $keys - Keys for map
/// @param {List} $values - Values for map
/// @return {Map} Freshly created map
/// @see http://sass-lang.com/documentation/Sass/Script/Functions.html#zip-instance_method
@function map-zip($keys, $values) {
  $l-keys: length($keys);
  $l-values: length($values);
  $min: min($l-keys, $l-values);
  $map: ();

  @if $l-keys != $l-values {
    @warn "There are #{$l-keys} key(s) for #{$l-values} value(s) in the map for `map-zip`. " + "Resulting map will only have #{$min} pairs.";
  }

  @if $min == 0 {
    @return $map;
  }

  @for $i from 1 through $min {
    $map: map-merge($map,  (nth($keys, $i): nth($values, $i)));
  }

  @return $map;
}

//- Based on: Quick sort @author Sam Richards
@function map-sort-by-value($map, $asc: true) {
  $keys: map-keys($map);
  $values: map-values($map);
  $k-less: ();
  $k-equal: ();
  $k-more: ();
  $v-less: ();
  $v-equal: ();
  $v-more: ();

  @if length($values) > 1 {
    $seed: nth($values, ceil(math.div(length($values), 2)));

    @each $key, $value in $map {
      @if ($value == $seed) {
        $k-equal: append($k-equal, $key);
        $v-equal: append($v-equal, $value);
      } @else if ($value < $seed) {
        @if ($asc) {
          $k-less: append($k-less, $key);
          $v-less: append($v-less, $value);
        } @else {
          $k-more: append($k-more, $key);
          $v-more: append($v-more, $value);
        }
      } @else if ($value > $seed) {
        @if ($asc) {
          $k-more: append($k-more, $key);
          $v-more: append($v-more, $value);
        } @else {
          $k-less: append($k-less, $key);
          $v-less: append($v-less, $value);
        }
      }
    }

    $less: map-zip($k-less, $v-less);
    $equal: map-zip($k-equal, $v-equal);
    $more: map-zip($k-more, $v-more);

    @return map-merge(
      map-merge(map-sort-by-value($less, $asc), $equal),
      map-sort-by-value($more, $asc)
    );
  }

  @return $map;
}
