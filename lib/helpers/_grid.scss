// -----------------------------------------------------------------------------
// Simply math here. If the value is auto we will return auto, otherwise this
// function will do the simple calc. Here you can also set te exception
// (for example for the margins or so on). Keep it simple plz.
// -----------------------------------------------------------------------------
@function sg-dimension($dividend, $divisor: $grid-columns, $margin: false) {

  @if $dividend == auto {
    @return auto;
  }

  @if $margin == 'width' {
    @return calc(#{($dividend / $divisor * 100%)} - #{$column-gutter});
  }

  @if $margin == 'margin-#{$grid-start}' {
    @return calc(#{($dividend / $divisor * 100%)} + (#{$column-gutter} / 2));
  }

  @return $dividend / $divisor * 100%;

}

// -----------------------------------------------------------------------------
// GRID SPACE CALCULATOR. It forks the two different syntax (number of columns
// or the n of N syntax) and it will pass them to the sg-dimension function.
// If the property is the width, it will add the relative flex properties to
// the returned block.
// -----------------------------------------------------------------------------
@mixin grid-calc($property, $attr, $margin: false, $query: false, $loop: 0) {

  // Width property needs flex attributes
  @if $property == width {
    $prev: if($loop > 1, nth(map-values($query), $loop - 1), null);

    @if type-of($prev) != type-of($attr){
      @if $attr == auto {
        flex: 1 1 0%;

      } @else {
        flex: 0 0 auto;
      }
    }
    @if $attr == 0 {
      $attr: auto;
    }
  }

  // Manage margins exception
  $margin: if($margin, $property, false);

  // (N of X) syntax
  @if length($attr) == 3 and nth($attr, 2) == 'of' {
    @include responsive-gutter {
      #{$property}: sg-dimension(nth($attr, 1), nth($attr, 3), $margin);
    }

  // Standard syntax
  } @else {
    @include responsive-gutter {
      #{$property}: sg-dimension(nth($attr, 1), $margin: $margin);
    }
  }

}

// -----------------------------------------------------------------------------
// Grid space mixin. It will simple dry everything if necessary and consider
// if we are in a media query and of what type. After that everything is passed
// to the grid calc mixin.
// -----------------------------------------------------------------------------
@mixin grid-space(
  $property: width,
  $attr: auto,
  $eq-grid: $eq-grid,
  $margin: false
) {

  @if type-of($attr) != map {
    @include dry-it('#{$property}-#{$attr}-#{$margin}') {
      @include grid-calc($property, $attr, $margin);
    }

  } @else {

    $counter: 0;
    @each $query, $value in $attr {
      $set: #{$query}#{$value}#{$eq-grid}-#{$margin};
      $counter: $counter + 1;

      @if $inmedia != false{
        @include dry-it('#{$property}-#{$set}-#{$query}-#{$value}-#{$counter}') {
          @include grid-calc($property, $value, $margin, $attr, $counter);
        }

      } @else {

        @include media-query($query, $eq-grid: $eq-grid) {

          @include dry-it('#{$property}-#{$set}-#{$margin}-#{$attr}-#{$counter}') {
            @include grid-calc($property, $value, $margin, $attr, $counter);
          }

        }
      }
    }
  }
}

// -----------------------------------------------------------------------------
// ROW MIXIN
// -----------------------------------------------------------------------------
@mixin grid-row($nested: true, $vertical: false) {
  @if $inmedia{
    @warn "You shouldn't use grid-row mixin in a mediaquery.";
    @if $use-dry{
      @warn "And you are drying your code too. This couldn't work.";
    }
  }

  @if $debug {
    content: 'ROW nested: #{$nested}, vertical #{$vertical}';
  }

  @include dry-it('row#{$nested}') {
    box-sizing: border-box;

    @if $grid-start != left and $use-flex {
      flex-direction: row-reverse;
    }

    @if $nested {
      @if not $sg-collapse {
        @include responsive-gutter {
          margin-left: calc(#{$column-gutter} / -2);
          margin-right: calc(#{$column-gutter} / -2);
          width: calc(100% + #{$column-gutter});
        }
      } @else {
        width: 100%;
      }
      flex: 1 0 auto;
    } @else {
      margin-left: auto;
      margin-right: auto;
      max-width: $row-width;
      width: 100%;
    }

    @if $use-table {
      display: table;
    }

    @if $use-float {
      &:after {
        clear: both;
        content: '';
        display: table;
      }
    }

    @if $use-flex {
      display: flex;
      flex-wrap: wrap;
    }

  }

  @if $vertical and $use-flex {
    @warn 'Deprecated! Please use `flex-direction: column` instead';
    flex-direction: column;
  }

}

// -----------------------------------------------------------------------------
// COLUMN MIXIN
// -----------------------------------------------------------------------------

@mixin grid-container {
  @include grid-row(false);
}

// -----------------------------------------------------------------------------
// COLUMN MIXIN
// -----------------------------------------------------------------------------
@mixin grid-column(
  $width: null,
  $collapse: $sg-collapse,
  $offset: null,
  $push: null,
  $pull: null,
  $order: null,
  $global: true,
  $eq-grid: $eq-grid,
  $margin: $sg-use-margin
) {

  // DEBUG -------------
  @if $debug {
    $column-setting: 'COLUMN: ';
    $column-setting: $column-setting + if($width, #{width ':' inspect($width) '| '}, '');
    $column-setting: $column-setting + if($collapse, #{collapse ':' inspect($collapse) '| '}, '');
    $column-setting: $column-setting + if($offset, #{offset ':' inspect($offset) '| '}, '');
    $column-setting: $column-setting + if($push, #{push ':' inspect($push) '| '}, '');
    $column-setting: $column-setting + if($pull, #{pull ':' inspect($pull) '| '}, '');
    $column-setting: $column-setting + if($order, #{order ':' inspect($order) '| '}, '');
    $column-setting: $column-setting + if($global, #{global ':' inspect($global) '| '}, '');
    $column-setting: $column-setting + if($eq-grid, #{eq-grid ':' inspect($eq-grid)}, '');
    $column-setting: $column-setting + if($margin, #{margin ':' inspect($margin)}, '');

    content: $column-setting;
  }


  // Global -------------
  @if $global {
    @include dry-it('colGlob') {
      box-sizing: border-box;

      @if $use-table {
        display: table-cell;
      }

      @if $use-float {
        float: $grid-start;
      }

      @if $use-flex {
        display: flex;
        flex-direction: column;
      }
    }
  }

  // Collapse -------------
  @if $collapse == true and $global == true {
    //- Margin if glob
    @if $sg-use-margin {
      @include dry-it('marginCollapseGlob') {
        margin-left: 0;
        margin-right: 0;
      }
    } @else {
      //- Padding
      @include dry-it('collapseGlob') {
        padding-left: 0;
        padding-right: 0;
      }
    }

  } @else {
    @if $global == true {
      @include dry-it('paddingGlob') {
        @include responsive-gutter {
          padding-left: calc(#{$column-gutter} / 2);
          padding-right: calc(#{$column-gutter} / 2);
        }
      }
    }
  }

  // Width -------------
  @if $width != null {
    @include grid-space(
      width, $width, $eq-grid, $margin: $margin
    )
  }

  // Margin ------------
  @if $margin {
    @include dry-it('marginGlob') {
      @include responsive-gutter{
        margin-left: calc(#{$column-gutter} / 2);
        margin-right: calc(#{$column-gutter} / 2);
      }
    }
  }

  // Offset -------------
  @if $offset != null {
    @include grid-space(
      margin-#{$grid-start},
      $offset,
      $eq-grid,
      $margin: $margin
    );
  }

  // Push -------------
  @if $push != null {
    position: relative;
    #{$grid-end}: auto;

    @include grid-space($grid-start, $push, $eq-grid);
  }

  // Pull -------------
  @if $pull != null {
    position: relative;
    #{$grid-start}: auto;

    @include grid-space($grid-end, $pull, $eq-grid);
  }


  // Order -------------
  @if $order != null {
    @if type-of($order) == map {
      @each $query, $value in $order {
        $set: #{$query}#{$value}#{$eq-grid};

        @include dry-it('colOrd#{$set}') {
          @include media-query($query, $eq-grid: $eq-grid) {
            order: $value;
          }
        }
      }
    } @else {
      order: $order;
    }
  }
}
